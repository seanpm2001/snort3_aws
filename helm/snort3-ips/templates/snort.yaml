apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: talosspds.config.github.com
spec:
  group: config.github.com
  names:
    kind: TalosSpd
    listKind: TalosSpdList
    plural: talosspds
    singular: talosspd
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: TalosSpd is the Schema for the talosspds API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TalosSpdSpec defines the desired state of TalosSpd
            properties:
              version:
                description: Foo is an example field of TalosSpd. Edit talosspd_types.go
                  to remove/update
                type: string
            type: object
          status:
            description: TalosSpdStatus defines the observed state of TalosSpd
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: ipspolicies.config.github.com
spec:
  group: config.github.com
  names:
    kind: IpsPolicy
    listKind: IpsPolicyList
    plural: ipspolicies
    singular: ipspolicy
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: IpsPolicy is the Schema for the ipspolicies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IpsPolicySpec defines the desired state of IpsPolicy
            properties:
              policyName:
                type: string
            required:
            - policyName
            type: object
          status:
            description: IpsPolicyStatus defines the observed state of IpsPolicy
            properties:
              lastUpdateTime:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state
                  of cluster Important: Run "make" to regenerate code after modifying
                  this file Information when was the last time the job was successfully
                  scheduled.'
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.serviceAccount.name }}
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: manager-role
rules:
- apiGroups:
  - config.github.com
  resources:
  - ipspolicies
  - talosspds
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - config.github.com
  resources:
  - ipspolicies/finalizers
  - talosspds/finalizers
  verbs:
  - update
- apiGroups:
  - config.github.com
  resources:
  - ipspolicies/status
  - talosspds/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: {{ .Values.serviceAccount.name }}
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: proxy-role
subjects:
- kind: ServiceAccount
  name: {{ .Values.serviceAccount.name }}
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: false
      resourceName: 2535efe7.github.com
kind: ConfigMap
metadata:
  name: manager-config
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    data-plane: snort-ips
  name: snort-ips-metrics-service
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    data-plane: snort-ips
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    data-plane: snort-ips
  name: snort-ips
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      data-plane: snort-ips
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        data-plane: snort-ips
    spec:
      # Service account for pod
      serviceAccountName: {{ .Values.serviceAccount.name }}
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        command:
        - /manager
        image: "{{ .Values.managerImage.repository }}:{{ .Values.managerImage.tag }}"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
      - command:
        - /usr/bin/supervisord
        - -c
        - /etc/supervisor/supervisord.conf
        image: "{{ .Values.snort3Image.repository }}:{{ .Values.snort3Image.tag }}"
        imagePullPolicy: {{ .Values.snort3Image.pullPolicy }}
        name: snort3
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef: 
                fieldPath: metadata.namespace
          - name: "ENV_SNORT3_INTERFACE"
            value: {{ .Values.snort3.interface }}
          - name: "ENV_SNORT3_MODE"
            value: {{ .Values.snort3.mode }}
          - name: "ENV_SNORT3_SNAPLEN"
            value: "4000"
          - name: "ENV_SNORT3_NUMTHREAD"
            value: "{{ .Values.snort3.numThread }}"
          - name: AWS_REGION
            value: {{ .Values.aws.region }}
        livenessProbe:
          exec:
            command:
              - pgrep
              - -x
              - supervisord
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 1
        readinessProbe:
          exec:
            command:
              - pgrep
              - -x
              - snort
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 5
      hostNetwork: true
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: false
      terminationGracePeriodSeconds: 10
